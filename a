1.mt cars
data(mtcars)
boxplot(mpg ~ cyl, data = mtcars,
        main = "Box Plot of MPG by Cylinder Count",
        xlab = "Cylinders", ylab = "Miles per Gallon")

bar_counts <- table(mtcars$cyl)
barplot(bar_counts, main = "Bar Plot of Car Counts by Cylinder Count",
        xlab = "Cylinders", ylab = "Count")

barplot(bar_counts, main = "Horizontal Bar Plot of Car Counts by Cylinder Count",
        xlab = "Count", ylab = "Cylinders", horiz = TRUE)

2.equl partioning
data <- c(5, 10, 11, 13, 15, 35, 50, 55, 72, 92, 204, 215)
num_bins <- 4
bin_size <- length(data) / num_bins
sorted_data <- sort(data)
bins <- split(sorted_data, rep(1:bin_size, each = num_bins, length.out = length(sorted_data)))
bin_labels <- paste("Bin", 1:bin_size)
named_bins <- setNames(bins, bin_labels)
print(named_bins)
data_range <- range(data)
num_bins <- 3
bin_width <- (data_range[2] - data_range[1]) / num_bins
bins <- list()
for (i in 1:num_bins) {
  lower_bound <- data_range[1] + bin_width * (i - 1)
  upper_bound <- data_range[1] + bin_width * i
  
  current_bin <- data[data >= lower_bound & data <= upper_bound]
  bins[[i]] <- current_bin
}
for (i in 1:num_bins) {
  cat(sprintf("Bin %d: ", i))
  cat(bins[[i]], sep = ", ")
  cat("\n")
}

set.seed(123)  
k <- 3  
kmeans_result <- kmeans(matrix(data), centers = k)
clustering_bins <- kmeans_result$cluster
cat("\n(c) Clustering (K-means) partitioning:\n")
print(clustering_bins)

3.mean
data<-c(5,10,11,13,15)
print(mean(data))
print(median(data))
mode<-as.numeric(names(table(data)[table(data)==max(table(data))]))
print(mode)
data_frame <- data.frame(
  neasure = c("mean","mode","median"))
print(data_frame)

4.normalizatrion
data <- c(200, 300, 400, 600, 1000)

new_min <- 0
new_max <- 1

normalized_minmax_new <- (data - min(data)) / (max(data) - min(data)) * (new_max - new_min) + new_min
cat("Min-Max Normalized Data (New Range):", normalized_minmax_new, "\n")

std_dev <- sqrt(mean((data - mean(data))^2))
normalized_zscore <- (data - mean(data)) / std_dev
cat("Z-Score Normalized Data:", normalized_zscore, "\n")

max_age_digits <- nchar(floor(max(data)))
normalized_decimal_scaling <- data / (10 ^ max_age_digits)
cat("Normalization by Decimal Scaling Value:", normalized_decimal_scaling, "\n")

5.mtcars
data(mtcars)
hist(mtcars$mpg, 
     main = "Histogram of MPG", 
     xlab = "Miles per Gallon", 
     ylab = "Frequency", 
     col = "blue", 
     border = "black", 
     breaks = 10)
plot(mtcars$mpg, 
     mtcars$hp, 
     main = "Scatter Plot of MPG vs. Horsepower", 
     xlab = "Miles per Gallon", 
     ylab = "Horsepower", 
     col = "red")

6.mtcars mpg
data(mtcars)
boxplot(mpg~cyl,data=mtcars)
7.quartile of age
age_data <- c(13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70)
length(age_data)
Q1 <- quantile(age_data, 0.25,type = 1)
Q3 <- quantile(age_data, 0.75)

cat("First Quartile (Q1):", Q1, "\n")
cat("Third Quartile (Q3):", Q3, "\n")

8.correlation
X = c(1, 2, 3, 4, 5)
Y = c(2, 4, 1, 3, 5)
correlation_coefficient <- cor(X, Y, method = "pearson")
cat("Pearson Correlation Coefficient:", correlation_coefficient, "\n")
z<-(X-mean(X))/sd(X)
print(z)

9.arithmetic operations
num1 <- 10
num2 <- 5
if (num1 %% 2 == 0) {
  cat(num1, "is even.\n")
} else {
  cat(num1, "is odd.\n")
}

if (num2 %% 2 == 0) {
  cat(num2, "is even.\n")
} else {
  cat(num2, "is odd.\n")
}
result_addition <- num1 + num2
cat("The sum of", num1, "and", num2, "is", result_addition, "\n")
result_subtraction <- num1 - num2
cat("The difference between", num1, "and", num2, "is", result_subtraction, "\n")

10.water linear regression
data(water)
plot(water$hardness, water$mortality, 
     xlab = "Hardness", ylab = "Mortality",
     main = "Scatterplot of Mortality vs. Hardness")

model <- lm(mortality ~ hardness, data = water)

summary(model)

# Predict mortality for hardness=88
new_data <- data.frame(hardness = 88)
predicted_mortality <- predict(model, new_data)

cat("Predicted mortality for hardness=88:", predicted_mortality, "\n")

11.tennis score
points_scored <- c(45, 55, 60, 62, 63, 65, 68, 70, 75, 80, 85, 90, 95, 100, 150)

boxplot(points_scored, 
        main = "Boxplot of Points Scored by Players",
        ylab = "Points Scored")

outliers <- boxplot(points_scored)$out
cat("Potential Outliers:", outliers, "\n")

12.mobile phones
# Given data
x_values <- c(4, 1, 5, 7, 10, 2, 50, 25, 90, 36)
y_values <- c(12, 5, 13, 19, 31, 7, 153, 72, 275, 110)
plot(x_values, y_values, main = "Scatter Plot of Mobile Phones Sold", xlab = "Number of Mobile Phones Sold", ylab = "Money")
text(x_values, y_values, labels = as.character(x_values), pos = 3)

13.bins operatinons
# Given dataset
data <- c(1, 1, 5, 5, 5, 5, 5, 8, 8, 10, 10, 10, 10, 12, 14, 14, 14, 15, 15, 15, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 25, 25, 25, 25, 25, 28, 28, 30, 30, 30)

# Calculate bin boundaries
num_bins <- 3
bin_boundaries <- quantile(data, probs = seq(0, 1, length.out = num_bins + 1))

# Apply equal-frequency partitioning
bin_assignment <- cut(data, breaks = bin_boundaries, labels = FALSE)

# Compute bin means
bin_means <- tapply(data, bin_assignment, mean)

# Plot histogram
hist(data, breaks = bin_boundaries, main = "Histogram with Equal-Frequency Partitioning", xlab = "Values", ylab = "Frequency")

# Add smoothed bin means to the plot
for (i in 1:num_bins) {
  lines(rep(bin_means[i], 2), c(0, max(hist(data, breaks = bin_boundaries)$counts)), col = "red", lwd = 2)
}

13.air passenger
data("AirPassengers")

hist_breaks <- seq(100, 700, by = 150)
hist_data <- AirPassengers[AirPassengers >= 100 & AirPassengers <= 700]


hist(hist_data, breaks = hist_breaks, main = "Air Passengers Histogram",
     xlab = "Passenger Count", ylab = "Frequency")

grid()

14.lines qsec mtcars
data(mtcars)

plot(mtcars$mpg, type = "l", col = "blue", xlab = "Index", ylab = "mpg", main = "Multiple Lines Chart")
lines(mtcars$qsec, col = "red")

legend("topright", legend = c("mpg", "qsec"), col = c("blue", "red"), lty = 1)



1.
intervals <- c("1-5", "5-15", "15-20", "20-50", "50-80", "80-110")
age <- c(200, 450, 300, 1500, 700, 44)
total <- sum(age)
print(total)

cmf <- cumsum(age)
print(cmf)

median_interval <- intervals[which.max(cmf >= total / 2)]

median_interval_bounds <- as.numeric(strsplit(median_interval, "-")[[1]])
lower_boundary <- median_interval_bounds[1]
upper_boundary <- median_interval_bounds[2]

c <- cmf[which(intervals == median_interval) - 1]
f<- age[which(intervals == median_interval)]
w <- upper_boundary - lower_boundary

median <- lower_boundary + ((total / 2 - c) / f) * w
cat("Approximate Median:", median, "\n")

2.
data <- c( 13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70)
print(sum(data))
cat("Mean:", mean(data), "\n")
median_value <- median(data)
cat("Median:", median_value, "\n")
mode_value <- as.numeric(names(table(data)[table(data) == max(table(data))]))

unique_values <- length(unique(data))

cat("Mode:", mode_value, "\n")
if (length(mode_value) == unique_values) {
  cat("The data is unimodal (has one mode).", "\n")
} else if (length(mode_value) == 2) {
  cat("The data is bimodal (has two modes).", "\n")
} else {
  cat("The data has more than two modes (trimodal or higher).", "\n")
}
midrange <- (min(data) + max(data)) / 2
cat("Midrange:", midrange, "\n")
Q1 <- quantile(data, 0.25)
Q3 <- quantile(data, 0.75)

cat("Q1:", Q1, "\n")
cat("Q3:", Q3, "\n")

3.
data <- c(200, 300, 400, 600, 1000)

new_min <- 0
new_max <- 1

normalized_minmax_new <- (data - min(data)) / (max(data) - min(data)) * (new_max - new_min) + new_min
cat("Min-Max Normalized Data (New Range):", normalized_minmax_new, "\n")

std_dev <- sqrt(mean((data - mean(data))^2))
normalized_zscore <- (data - mean(data)) / std_dev
cat("Z-Score Normalized Data:", normalized_zscore, "\n")

4.
data <- c(11, 13, 13, 15, 15, 16, 19, 20, 20, 20, 21, 21, 22, 23, 24, 30, 40, 45, 45, 45, 71, 72, 73, 75)

# Number of bins
num_bins <- 4

# Calculate bin size
bin_size <- length(data) / num_bins

# Sort the data
sorted_data <- sort(data)

# Initialize variables for storing smoothed values
smoothed_mean <- numeric()
smoothed_median <- numeric()
smoothed_boundaries <- numeric()

# Divide data into bins
bins <- split(sorted_data, ceiling(seq_along(sorted_data) / bin_size))

# Smoothing by bin mean
for (bin_values in bins) {
  bin_mean <- mean(bin_values)
  smoothed_mean <- c(smoothed_mean, rep(bin_mean, length(bin_values)))
}

# Smoothing by bin median
for (bin_values in bins) {
  bin_median <- median(bin_values)
  smoothed_median <- c(smoothed_median, rep(bin_median, length(bin_values)))
}

# Smoothing by bin boundaries
for (bin_values in bins) {
  bin_boundary <- range(bin_values)
  smoothed_boundaries <- c(smoothed_boundaries, rep(bin_boundary,length(bin_values)))
}

# Print the results
cat("Smoothing by Mean:", smoothed_mean, "\n")
cat("Smoothing by Median:", smoothed_median, "\n")
cat("Smoothing by Boundaries:", smoothed_boundaries, "\n")

5.
age <- c(23, 23, 27, 27, 39, 41, 47, 49, 50, 52, 54, 54, 56, 57, 58, 58, 60, 61)
body_fat <- c(9.5, 26.5, 7.8, 17.8, 31.4, 25.9, 27.4, 27.2, 31.2, 34.6, 42.5, 28.8, 33.4, 30.2, 34.1, 32.9, 41.2, 35.7)
mean_age <- mean(age)
median_age <- median(age)
sd_age <- sd(age)

mean_body_fat <- mean(body_fat)
median_body_fat <- median(body_fat)
sd_body_fat <- sd(body_fat)

cat("Age:\n")
cat("Mean:", mean_age, "\n")
cat("Median:", median_age, "\n")
cat("Standard Deviation:", sd_age, "\n")

cat("\nBody Fat:\n")
cat("Mean:", mean_body_fat, "\n")
cat("Median:", median_body_fat, "\n")
cat("Standard Deviation:", sd_body_fat, "\n")

# (b) Draw boxplots
boxplot(age, body_fat, names = c("Age", "Body Fat"), main = "Boxplot of Age and Body Fat", ylab = "Value")
plot(age, body_fat, main = "Scatter Plot", xlab = "Age", ylab = "Body Fat Percentage")
qqnorm(body_fat)
qqline(body_fat)

6.
age <- c(23, 23, 27, 27, 39, 41, 47, 49, 50, 52, 54, 54, 56, 57, 58, 58, 60, 61)
body_fat <- c(9.5, 26.5, 7.8, 17.8, 31.4, 25.9, 27.4, 27.2, 31.2, 34.6, 42.5, 28.8, 33.4, 30.2, 34.1, 32.9, 41.2, 35.7)

age_value <- 35
new_min <- 0
new_max <- 1

normalized_minmax_new <- (age_value - min(age)) / (max(age) - min(age)) * (new_max - new_min) + new_min
cat("Min-Max Normalized Data (New Range):", normalized_minmax_new, "\n")


mean_age <- mean(age)
sd_age = 12.94

normalized_z_score <- (age_value - mean_age) / sd_age
cat("Z-Score Normalized Value:", normalized_z_score, "\n")
max_age_digits <- nchar(floor(max(age)))
normalized_decimal_scaling <- age_value / (10 ^ max_age_digits)
cat("Normalization by Decimal Scaling Value:", normalized_decimal_scaling, "\n")

7.
pencils <- c(9, 25, 23, 12, 11, 6, 7, 8, 9, 10)

mean_pencils <- mean(pencils)
cat("Mean:", mean_pencils, "\n")

median_pencils <- median(pencils)
cat("Median:", median_pencils, "\n")
mode_value=names(table(pencils))[table(pencils)==max(table(pencils))]


cat("Mode:", mode_value, "\n")

8.
x_values <- c(4, 1, 5, 7, 10, 2, 50, 25, 90, 36)
y_values <- c(12, 5, 13, 19, 31, 7, 153, 72, 275, 110)
plot(x_values, y_values, main = "Scatter Plot of Mobile Phones Sold", xlab = "Number of Mobile Phones Sold", ylab = "Money")
text(x_values, y_values, labels = as.character(x_values), pos = 3)

9.
data <- c(55, 60, 71, 63, 55, 65, 50, 55, 58, 59, 61, 63, 65, 67, 71, 72, 75)

eq_freq_bins <- cut(data, breaks = quantile(data, probs = seq(0, 1, 1/3)), include.lowest = TRUE)
print(eq_freq_bins)
eq_width_bins <- cut(data, breaks = seq(min(data), max(data), length.out = 4), include.lowest = TRUE)
print(eq_width_bins)
hist(data, breaks = "FD", main = "Histogram of Data", xlab = "Data Points")
legend("topright", c("Equal-frequency", "Equal-width"), fill = c("blue", "red"))
abline(v = quantile(data, probs = seq(0, 1, 1/3)), col = "blue", lty = 2)
abline(v = seq(min(data), max(data), length.out = 4), col = "red", lty = 2)

9.
scores <- c(55, 60, 71, 63, 55, 65, 50, 55, 58, 59, 61, 63, 65, 67, 71, 72, 75)
num_bins_ew <- 3
bin_boundaries_ew <- seq(min(scores), max(scores) + bin_width_ew, by = bin_width_ew)
bins_ew <- cut(scores, breaks = bin_boundaries_ew, include.lowest = TRUE)
for (i in seq_along(bin_boundaries_ew)) {
  lower_bound <- bin_boundaries_ew[i]
  upper_bound <- bin_boundaries_ew[i + 1]
  bin_data <- scores[scores > lower_bound & scores < upper_bound]
  cat("Bin", i, "(", lower_bound, " - ", upper_bound, "): ", length(bin_data), " scores\n")
  hist(scores, breaks = bin_boundaries_ew, main = "Histogram with Equal-Width Bins",
       xlab = "Scores", ylab = "Frequency", col = "lightblue")
  
  abline(v = bin_boundaries_ew, col = "red", lty = 2)
  
  
  legend("topright", legend = paste("Bin", 1:i, "(", round(bin_boundaries_ew, 2), " - ", round(bin_boundaries_ew + bin_width_ew, 2), ")"),
         col = "red", lty = 2, cex = 0.8)
}
num_bins_eq_depth <- 3

hist(marks, breaks = num_bins_eq_depth, main = "Equal-Frequency Partitioning", xlab = "Marks", ylab = "Frequency")
bin_width_ew <- (max(scores) - min(scores)) / num_bins_ew

10.
speed_data <- c(78.3, 81.8, 82, 74.2, 83.4, 84.5, 82.9, 77.5, 80.9, 70.6)

std_dev <- sd(speed_data)

cat("Interquartile Range (IQR):",IQR(speed_data ) , "\n")
cat("Standard Deviation:", std_dev, "\n")

11.age_data <- c(13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70)

Q1 <- quantile(age_data, 0.25,type = 1)
Q3 <- quantile(age_data, 0.75)

cat("First Quartile (Q1):", Q1, "\n")
cat("Third Quartile (Q3):", Q3, "\n")

Weka
1.
@relation TEST_ITEM_TRANS
@attribute a {TRUE, FALSE}
@attribute b {TRUE, FALSE}
@attribute c {TRUE, FALSE}
@attribute d {TRUE, FALSE}
@attribute e {TRUE, FALSE}
@data
TRUE,FALSE,FALSE,TRUE,TRUE 
TRUE,TRUE,TRUE,FALSE,TRUE 
TRUE,TRUE,FALSE,TRUE,TRUE 
TRUE,FALSE,TRUE,TRUE,TRUE 
FALSE,TRUE,TRUE,FALSE,TRUE 
FALSE,TRUE,FALSE,TRUE,TRUE
FALSE,FALSE,TRUE,TRUE,FALSE 
TRUE,TRUE,TRUE,FALSE,FALSE 
TRUE,FALSE,FALSE,TRUE,TRUE 
TRUE,TRUE,FALSE,FALSE,TRUE

2.
@relation items
@attribute milk{yes,no}
@attribute beer{yes,no}
@attribute diapers{yes,no}
@attribute bread{yes,no}
@attribute butter{yes,no}
@attribute cookies{yes,no}

@data
yes,yes,yes,no,no,no
yes,no,no,yes,yes,no
yes,no,yes,no,no,yes
no,no,no,yes,yes,yes
no,yes,yes,no,no,yes
yes,no,yes,yes,yes,no
no,no,yes,yes,yes,no
no,yes,yes,no,no,no
yes,no,yes,yes,yes,no
no,yes,no,no,no,yes

3.
@relation buyscomputer
@attribute age{<=30,31...40,>40}
@attribute income{high,medium,low}
@attribute student{yes,no}
@attribute credit{fair,excellent}
@attribute buys{yes,no}
@data
<=30 high no fair no
<=30 high no excellent no
31...40 high no fair yes
>40 medium no fair yes
>40 low yes fair yes
>40 low yes excellent no
31...40 low yes excellent yes
<=30 medium no fair no
<=30 low yes fair yes
>40 medium yes fair yes
<=30 medium yes excellent yes
31...40 medium no excellent yes
31...40 high yes fair yes
>40 medium no excellent no

4.
@relation items
@attribute m {yes,no}
@attribute o {yes,no}
@attribute n {yes,no}
@attribute k {yes,no}
@attribute e {yes,no}
@attribute y {yes,no} 
@attribute d {yes,no}
@attribute a {yes,no}
@attribute u {yes,no}
@attribute c {yes,no}
@attribute i {yes,no}
@data
yes,yes,yes,yes,yes,yes,no,no,no,no,no
yes,yes,yes,yes,yes,yes,no,no,no,no,no,no
yes,yes,yes,yes,no,no,no,no,no,no,no
yes,yes,yes,yes,yes,no,no,no,no,no,no
yes,yes,yes,yes,yes,yes,no,no,no,no,no

5.
@relation items
@attribute hotdogs {yes,no}
@attribute buns {yes,no}
@attribute ketchup {yes,no}
@attribute coke {yes,no}
@attribute chips {yes,no}

@data
yes,yes,yes,no,no
yes,yes,no,no,no
yes,no,no,yes,yes
no,no,no,yes,yes
no,no,yes,no,yes
yes,no,no,yes,yes

Apriori
data <- list(
  c("a","b","c","e"),
  c("a","b","d","e"),
  c("a","c","e","d"),
  c("b","c","e"),
  c("b","d","e"),
  c("c","d"),
  c("a","c","b"),
  c("a","e","d"),
  c("a","b","e")
)
rules <- apriori(data,
                
                parameter = list(supp = 0.10, conf = 0.50))
print(rules)



